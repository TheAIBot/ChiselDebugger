@inherits FIRBase<BiArgMonoResPrimOp>

<div id="@SizeWatcherID" class="primOp" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();">
    <div style="padding:@ContentPadding.ToPixels();">
        <table>
            <tr>
                <td class="primOpSymbol" rowspan="2" colspan="2">@Operation.OpName</td>
                <td>@Operation.A.Con?.Value.ToBinaryString()</td>
            </tr>
            <tr>
                <td>@Operation.B.Con?.Value.ToBinaryString()</td>
            </tr>
            <tr>
                <td colspan="3">@Operation.Result.Con.Value.ToBinaryString()</td>
            </tr>
        </table>
    </div>

    @foreach (var input in InputOffsets)
    {
        <IOPortUI Position="@input.Position"></IOPortUI>
    }

    @foreach (var output in OutputOffsets)
    {
        <IOPortUI Position="@output.Position"></IOPortUI>
    }
</div>

@code
{
    private const int ContentPadding = 5;

    protected override List<DirectedIO> OnMakeInputs(int width, int height)
    {
        List<DirectedIO> inputs = new List<DirectedIO>();

        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point aInputPos = new Point(0, ioYStart);
        inputs.Add(new DirectedIO(Operation.A, aInputPos, MoveDirs.Right));

        Point bInputPos = new Point(0, ioYStart + ioYDistance);
        inputs.Add(new DirectedIO(Operation.B, bInputPos, MoveDirs.Right));

        return inputs;
    }

    protected override List<DirectedIO> OnMakeOutputs(int width, int height)
    {
        List<DirectedIO> outputs = new List<DirectedIO>();

        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point outputPos = new Point(width, ioYStart + ioYDistance * 2);
        outputs.Add(new DirectedIO(Operation.Result, outputPos, MoveDirs.Right));

        return outputs;
    }

}
