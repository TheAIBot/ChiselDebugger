@inherits FIRBase<Module>

<div class="module" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();">
    <div class="moduleHeader">
        <h2>@Operation.Name</h2>
    </div>
    <div style="padding:@ContentPadding.ToPixels();">
        <div class="moduleContent" @ref="SizeWatcher" style="width:@GetCurrentSize().X.ToPixels();height:@GetCurrentSize().Y.ToPixels();min-width:@MinContentSize.X;min-height:@MinContentSize.Y">
            @foreach (var posOp in ModuleOpPoses)
            {
                @if (posOp.Value is Mux)
                {
                    <MuxOp PosOp="@(posOp.Cast<Mux>())" OnComponentUpdate="@UpdateComponentInfo"></MuxOp>
                }
                else if (posOp.Value is BiArgMonoResPrimOp)
                {
                    <BiArgMonoResPrimOpUI PosOp="@(posOp.Cast<BiArgMonoResPrimOp>())" OnComponentUpdate="@UpdateComponentInfo"></BiArgMonoResPrimOpUI>
                }
            }

            @foreach (var input in InputOffsets)
            {
                <IOPortUI Position="@input.Position"></IOPortUI>
            }

            @foreach (var output in OutputOffsets)
            {
                <IOPortUI Position="@output.Position"></IOPortUI>
            }

            <svg class="moduleWires" style="width: @GetCurrentSize().X.ToPixels();height: @GetCurrentSize().Y.ToPixels();">
                @foreach (var wire in ModuleConnections)
                {
                    <line class="wire" x1="@wire.Start.X" y1="@wire.Start.Y" x2="@wire.End.X" y2="@wire.End.Y" />
                }
            </svg>
        </div>
    </div>
</div>

@code
{
    private const int ContentPadding = 20;
    private Point MinContentSize;
    private List<Positioned<FIRRTLNode>> ModuleOpPoses = new List<Positioned<FIRRTLNode>>();

    private const int MarginForIO = 20;
    private const int MinSpaceBetweenIO = 15;
    private const int MaxSpaceBetweenIO = 40;
    private List<Line> ModuleConnections = new List<Line>();

    private ConnectionsHandler ConHandler;
    private Placer NodePlacer;

    protected override void OnFirstParametersSetAsync()
    {
        MinContentSize = GetMinSizeForIO();

        NodePlacer = new Placer(Operation);
        NodePlacer.OnPlacedNodes += UpdatePlacement;
        ModuleOpPoses = Operation.GetAllNodes().Select(x => new Positioned<FIRRTLNode>(new Point(0, 0), x)).ToList();

        ConHandler = new ConnectionsHandler(Operation);
    }

    protected override bool OnResize(int width, int height)
    {
        base.OnResize(width, height);

        ConHandler.UpdateIOFromNode(Operation, InputOffsets, OutputOffsets);

        return true;
    }

    private Point GetMinSizeForIO()
    {
        int requiredWidth = 0;

        int maxIO = Math.Max(Operation.ExternalInputs.Count, Operation.ExternalOutputs.Count);

        int requiredIOMargin = MarginForIO * 2;
        int requiredHeight = requiredIOMargin + (maxIO - 1) * MinSpaceBetweenIO;

        return new Point(requiredWidth, requiredHeight);
    }

    private void UpdatePlacement(PlacementInfo placements)
    {
        ModuleOpPoses = placements.NodePositions;

        SetCurrentSize(placements.SpaceNeeded);
        List<List<Point>> paths = ConHandler.PathLines(placements);

        ModuleConnections = new List<Line>();
        foreach (var path in paths)
        {
            Point start = path[0];
            for (int i = 1; i < path.Count; i++)
            {
                ModuleConnections.Add(new Line(start, path[i]));
                start = path[i];
            }
        }



        StateHasChanged();
    }

    protected override List<Positioned<Input>> OnMakeInputs(int width, int height)
    {
        return PositionIO<Input>(width, height, Operation.InternalInputs, width + ContentPadding);
    }

    protected override List<Positioned<Output>> OnMakeOutputs(int width, int height)
    {
        return PositionIO<Output>(width, height, Operation.InternalOutputs, -ContentPadding);
    }

    private List<Positioned<T>> PositionIO<T>(int width, int height, List<T> io, int x)
    {
        int usableSpace = height - MarginForIO * 2;

        int yStart = MarginForIO;
        int spaceBetweenIO;
        if (io.Count <= 1)
        {
            yStart += usableSpace / 2;
            spaceBetweenIO = 0;
        }
        else
        {
            int spacersNeeded = io.Count - 1;
            int possibleSpaceBetweenIO = usableSpace / spacersNeeded;
            spaceBetweenIO = Math.Min(MaxSpaceBetweenIO, possibleSpaceBetweenIO);
            int usedSpace = spaceBetweenIO * spacersNeeded;

            yStart += (usableSpace - usedSpace) / 2;
        }

        List<Positioned<T>> posIO = new List<Positioned<T>>();
        for (int i = 0; i < io.Count; i++)
        {
            int y = yStart + spaceBetweenIO * i;

            Point pos = new Point(x, y);
            posIO.Add(new Positioned<T>(pos, io[i]));
        }

        return posIO;
    }

    private void UpdateComponentInfo(FIRComponentUpdate updateData)
    {
        ConHandler.UpdateIOFromNode(updateData.Node, updateData.InputOffsets, updateData.OutputOffsets);
        NodePlacer.SetNodeSize(updateData.Node, updateData.Size);
    }
}
