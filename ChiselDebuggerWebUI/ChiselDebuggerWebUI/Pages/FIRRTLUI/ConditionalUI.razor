@inherits FIRBase<Conditional>

<div id="@SizeWatcherID" class="conditional" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();width:@GetCurrentSize().X.ToPixels();height:@GetCurrentSize().Y.ToPixels();">
    @foreach (var modPos in CondModules)
    {
        <ModuleUI @key=modPos.Value PosOp="modPos" ParentLayoutCtrl="CurrLayout" IgnoreUnusedIO="true"></ModuleUI>
    }
</div>

@code {
    private List<Positioned<Module>> CondModules = new List<Positioned<Module>>();
    private CondLayout CurrLayout;

    protected override void OnFirstParametersSetAsync()
    {
        base.OnFirstParametersSetAsync();

        CondModules = Operation.CondMods.Select(x => new Positioned<Module>(Point.Zero, x.Mod)).ToList();
        Debug.WriteLine("Made: " + CondModules.Count);

        CurrLayout = new CondLayout(Operation);
        CurrLayout.OnLayoutUpdate += (x, y) => InvokeAsync(() => UpdateLayout(x, y));

    }

    private void UpdateLayout(List<Positioned<Module>> positions, FIRComponentUpdate componentInfo)
    {
        CondModules = positions;

        Debug.WriteLine("Updated: " + CondModules.Count);

        SetCurrentSize(componentInfo.Size);
        ParentLayoutCtrl?.UpdateComponentInfo(componentInfo);
        StateHasChanged();
    }

    protected override void OnResize(int width, int height)
    {

    }

    protected override List<DirectedIO> OnMakeInputs(int width, int height)
    {
        throw new NotImplementedException();
    }

    protected override List<DirectedIO> OnMakeOutputs(int width, int height)
    {
        throw new NotImplementedException();
    }
}