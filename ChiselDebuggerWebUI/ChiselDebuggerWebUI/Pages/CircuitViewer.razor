@page "/circuitviewer"
@page "/"
@using FIRRTL
@using VCDReader
@using System.Diagnostics
@using ChiselDebug.Timeline;

@inject IJSRuntime JS;

<CascadingValue Value="@DebugCtrl" Name="DebugCtrl" IsFixed="true">
    <TimelineUI />
    <div style="height:20px;" />
    <div id="CircuitContainer" class="Circuit" style="transform: scale(@CircuitScale.ToHtmlNumber());">
        @foreach (var modulePos in ModulePositions)
        {
            <ModuleUI PosOp="@modulePos" />
        }
    </div>
</CascadingValue>





@code
{

    private DebugController DebugCtrl;
    private List<Positioned<ChiselDebug.GraphFIR.Module>> ModulePositions = new List<Positioned<ChiselDebug.GraphFIR.Module>>();
    private float CircuitScale = 1.0f;

    protected override void OnInitialized()
    {
        //var circuit = FIRRTL.Parse.FromFile("Examples/MovingAveragePow2.lo.fir");
        //var vcd = VCDReader.Parse.FromFile("Examples/MovingAveragePow2.vcd");
        var circuit = FIRRTL.Parse.FromFile("Examples/RegFileVec.lo.fir");
        var vcd = VCDReader.Parse.FromFile("Examples/RegFileVec.vcd");
        CircuitGraph graph = CircuitToGraph.GetAsGraph(circuit);
        graph.InferTypes();

        VCDTimeline timeline = new VCDTimeline(vcd);

        DebugCtrl = new DebugController(graph, timeline);
        DebugCtrl.OnReRender += () => InvokeAsync(StateHasChanged);

        ModulePositions.Add(new Positioned<ChiselDebug.GraphFIR.Module>(new Point(0, 0), graph.Modules[0]));


    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            return JSEvents.AddScrollListener(JS, "CircuitContainer", x => InvokeAsync(() => HandleScroll(x))).AsTask();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void HandleScroll(int scrollDelta)
    {
        CircuitScale -= scrollDelta / 10.0f;
        CircuitScale = Math.Clamp(CircuitScale, 0.1f, 10.0f);
        StateHasChanged();
    }
}
