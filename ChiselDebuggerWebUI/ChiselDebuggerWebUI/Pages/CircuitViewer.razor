@page "/circuitviewer"
@page "/"
@using FIRRTL
@using VCDReader
@using System.Diagnostics
@using ChiselDebug.Timeline;

<div class="timelineContent">
    <input class="timeline" type="range" min="@StartTime" max="@EndTime" value="@StartTime" list="steplist" @oninput="TimeChanged" />
    <div style=" padding-left: 10px; padding-right: 10px;">
        <div class="ticksList">
            @foreach (var time in TimeSteps)
            {
                <tick value="@time" style="left: @($"{((((float)time - StartTime) / (EndTime - StartTime)) * 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}%"); top: 0px;">@(time.ToString("N0", System.Globalization.CultureInfo.InvariantCulture))ns</tick>
            }
        </div>
    </div>

    <datalist id="steplist">
        @foreach (var time in TimeSteps)
        {
            <option value="@time"></option>
        }
    </datalist>
</div>
<div style="height:20px;"></div>
<div>
    <div class="Circuit">
        @foreach (var modulePos in ModulePositions)
        {
            <ModuleUI PosOp="@modulePos"></ModuleUI>
        }

    </div>
</div>





@code
{
    private List<Positioned<ChiselDebug.GraphFIR.Module>> ModulePositions = new List<Positioned<ChiselDebug.GraphFIR.Module>>();

    private VCDTimeline Timeline;
    private CircuitGraph Graph;

    private ulong CurrTime;
    private ulong StartTime;
    private ulong EndTime;
    private List<ulong> TimeSteps = new List<ulong>();

    protected override void OnInitialized()
    {
        //var circuit = FIRRTL.Parse.FromFile("Examples/MovingAveragePow2.lo.fir");
        //var vcd = VCDReader.Parse.FromFile("Examples/MovingAveragePow2.vcd");
        var circuit = FIRRTL.Parse.FromFile("Examples/RegFileVec.lo.fir");
        var vcd = VCDReader.Parse.FromFile("Examples/RegFileVec.vcd");
        Graph = CircuitToGraph.GetAsGraph(circuit);
        Graph.InferTypes();

        Timeline = new VCDTimeline(vcd);
        StartTime = Timeline.TimeInterval.StartInclusive;
        EndTime = Timeline.TimeInterval.InclusiveEnd();
        CurrTime = StartTime;

        List<ulong> times = Timeline.GetAllSimTimes().ToList();
        const int timesOnTimeline = 15;
        for (int i = 0; i < timesOnTimeline - 1; i++)
        {
            TimeSteps.Add(times[(int)((times.Count / (float)timesOnTimeline) * i)]);
        }
        TimeSteps.Add(times.Last());


        ModulePositions.Add(new Positioned<ChiselDebug.GraphFIR.Module>(new Point(0, 0), Graph.Modules[0]));
    }

    private void TimeChanged(ChangeEventArgs args)
    {
        ulong time = ulong.Parse((string)args.Value);
        if (time != CurrTime)
        {
            CurrTime = time;
            Graph.SetState(Timeline.GetStateAtTime(CurrTime));
        }
    }
}
