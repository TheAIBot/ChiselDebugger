@using VCDReader
@using ChiselDebug.Timeline;

@inherits ManualRenderBase

<div class="timelineContent">
    <input class="timeline" type="range" min="@StartTime" max="@EndTime" value="@StartTime" list="steplist" @oninput="TimeChanged" />
    <div style=" padding-left: 10px; padding-right: 10px;">
        <div class="ticksList">
            @foreach (var time in TimeSteps)
            {
                <tick value="@time" style="left: @($"{time.GetXPercent(StartTime, EndTime).ToPercent()}"); top: 0px;">@time.ToString()</tick>
            }
        </div>
    </div>

    <datalist id="steplist">
        @foreach (var time in TimeSteps)
        {
            <option value="@time"></option>
        }
    </datalist>
</div>

@code {
    [CascadingParameter(Name = "DebugCtrl")]
    protected DebugController DebugCtrl { get; set; }

    private ulong CurrTime;
    private ulong StartTime;
    private ulong EndTime;
    private List<TimePos> TimeSteps = new List<TimePos>();

    private readonly struct TimePos
    {
        public readonly ulong Time;

        public TimePos(ulong time)
        {
            this.Time = time;
        }

        public float GetXPercent(ulong startTime, ulong endTime)
        {
            return (((float)Time - startTime) / (endTime - startTime)) * 100;
        }

        public override string ToString()
        {
            return Time.ToString("N0", System.Globalization.CultureInfo.InvariantCulture) + "ns";
        }
    }

    protected override void OnFirstParametersSetAsync()
    {
        VCDTimeline timeline = DebugCtrl.Timeline;
        StartTime = timeline.TimeInterval.StartInclusive;
        EndTime = timeline.TimeInterval.InclusiveEnd();
        CurrTime = StartTime;

        MakeTimeTicks();
    }

    private void MakeTimeTicks()
    {
        List<ulong> times = DebugCtrl.Timeline.GetAllSimTimes()
            .Where(x => StartTime <= x && x <= EndTime)
            .ToList();


        const int timesOnTimeline = 15;
        float distanceBetweenTimes = times.Count / (float)(timesOnTimeline - 1);
        for (int i = 0; i < timesOnTimeline - 1; i++)
        {
            TimeSteps.Add(new TimePos(times[(int)(distanceBetweenTimes * i)]));
        }
        TimeSteps.Add(new TimePos(times.Last()));
    }

    private void TimeChanged(ChangeEventArgs args)
    {
        ulong time = ulong.Parse((string)args.Value);
        if (time != CurrTime)
        {
            CurrTime = time;
            DebugCtrl.SetCircuitState(time);
        }
    }

}
