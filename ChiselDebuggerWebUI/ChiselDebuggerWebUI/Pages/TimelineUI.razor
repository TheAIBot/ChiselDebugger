@using VCDReader
@using ChiselDebug.Timeline;

@inject IJSRuntime JS
@inherits ManualRenderBase

<div class="timelineContent">
    <div class="timelineControlsContent">
        <input type="number" min="@AllTimes.First()" max="@AllTimes.Last()" value="@CurrTime" pattern="\d+" title="Positive numbers only." @oninput="TimeChanged" />
    </div>
    <div class="timelineRangeContent">
        <div class="ticksPadding">
            <div class="rangeSelect" @ref="RangeDiv" @onmousedown="RangeSelectStarted" @ondblclick="ResetRange">
                @if (StartRangeSelect.Time <= EndRangeSelect.Time)
                {
                    <div class="rangeStart" style="left: 0px; width: @(StartRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth).ToPixels());"></div>
                    <div class="rangeStop" style="left: @(EndRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth).ToPixels()); width: @(((float)RangeParentWidth - EndRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth)).ToPixels());"></div>
                }
                else
                {
                    <div class="rangeStart" style="left: 0px; width: @(EndRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth).ToPixels());"></div>
                    <div class="rangeStop" style="left: @(StartRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth).ToPixels()); width: @(((float)RangeParentWidth - StartRangeSelect.GetPixels(StartTime, EndTime, RangeParentWidth)).ToPixels());"></div>
                }
            </div>
        </div>
        <input class="timeline" type="range" min="@StartTime" max="@EndTime" value="@CurrTime" list="steplist" @oninput="TimeChanged" />
        <div class="ticksPadding">
            <div class="ticksList">
                @foreach (var time in TimeSteps)
                {
                    <tick value="@time" style="left: @($"{time.GetXPercent(StartTime, EndTime).ToPercent()}"); top: 0px;">@time.ToString()</tick>
                }
            </div>
        </div>
    </div>

    <datalist id="steplist">
        @foreach (var time in TimeSteps)
        {
            <option value="@time.Time"></option>
        }
    </datalist>
</div>

@code {
    [CascadingParameter(Name = "DebugCtrl")]
    protected DebugController DebugCtrl { get; set; }

    [CascadingParameter(Name = "DocEvents")]
    protected MainLayout DocEvents { get; set; }


    private double RangeParentStartX;
    private double RangeParentWidth;
    private TimePos StartRangeSelect;
    private TimePos EndRangeSelect;
    protected ElementReference RangeDiv;

    private ulong CurrTime;
    private ulong StartTime;
    private ulong EndTime;
    private ulong[] AllTimes;
    private List<TimePos> TimeSteps = new List<TimePos>();

    private readonly struct TimePos
    {
        public readonly ulong Time;

        public TimePos(ulong time)
        {
            this.Time = time;
        }

        public float GetXPercent(ulong startTime, ulong endTime)
        {
            return (((float)Time - startTime) / (endTime - startTime)) * 100;
        }

        public float GetPixels(ulong startTime, ulong endTime, double containerWidth)
        {
            return (GetXPercent(startTime, endTime) / 100) * (float)containerWidth;
        }

        public static ulong GetTimeFromPos(double xToTime, double containerWidth, ulong startTime, ulong endTime)
        {
            double xPercent = xToTime / containerWidth;
            double time = startTime + endTime * xPercent - xPercent * startTime;

            ulong utime = (ulong)Math.Round(time);
            return Math.Clamp(utime, startTime, endTime);
        }

        public override string ToString()
        {
            return Time.ToString("N0", System.Globalization.CultureInfo.InvariantCulture);
        }
    }

    protected override void OnFirstParametersSetAsync()
    {
        VCDTimeline timeline = DebugCtrl.Timeline;
        StartTime = timeline.TimeInterval.StartInclusive;
        EndTime = timeline.TimeInterval.InclusiveEnd();
        CurrTime = StartTime;
        AllTimes = timeline.GetAllSimTimes().ToArray();

        MakeTimeTicks();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RangeParentStartX = (await JS.InvokeAsync<ElemWH>("JSUtils.getElementPosition", RangeDiv)).Width;
            RangeParentWidth = (await JS.InvokeAsync<ElemWH>("JSUtils.getElementSize", RangeDiv)).Width;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void MakeTimeTicks()
    {
        Span<ulong> times = GetTimelineSlice(StartTime, EndTime);

        if (times.Length == 0)
        {
            times = AllTimes;
            StartTime = AllTimes.First();
            EndTime = AllTimes.Last();
        }

        StartRangeSelect = new TimePos(StartTime);
        EndRangeSelect = new TimePos(EndTime);

        TimeSteps.Clear();
        const int maxTimesOnTimeline = 15;
        if (times.Length > maxTimesOnTimeline)
        {
            float distanceBetweenTimes = times.Length / (float)(maxTimesOnTimeline - 1);
            for (int i = 0; i < maxTimesOnTimeline - 1; i++)
            {
                TimeSteps.Add(new TimePos(times[(int)MathF.Round(distanceBetweenTimes * i)]));
            }
            TimeSteps.Add(new TimePos(times[^1]));
        }
        else
        {
            for (int i = 0; i < times.Length; i++)
            {
                TimeSteps.Add(new TimePos(times[i]));
            }
        }
    }

    private Span<ulong> GetTimelineSlice(ulong fromTimeInclusive, ulong toTimeInclusive)
    {
        int startIndex = Array.BinarySearch(AllTimes, fromTimeInclusive);
        int endIndex = Array.BinarySearch(AllTimes, toTimeInclusive);

        return AllTimes.AsSpan(startIndex, endIndex - startIndex);
    }

    private void TimeChanged(ChangeEventArgs args)
    {
        if (ulong.TryParse((string)args.Value, out ulong time) &&
            time != CurrTime)
        {
            //Limit to range of timeline
            time = Math.Clamp(time, AllTimes.First(), AllTimes.Last());

            ulong inTimeline = GetClosestTime(time);

            //changed time may lie outside the timeline range.
            //in that case set resize the range to include the
            //time.
            if (inTimeline < StartTime || inTimeline > EndTime)
            {
                StartTime = Math.Min(StartTime, inTimeline);
                EndTime = Math.Max(EndTime, inTimeline);
                MakeTimeTicks();
            }

            if (CurrTime != inTimeline)
            {
                CurrTime = inTimeline;
                DebugCtrl.SetCircuitState(CurrTime);
            }

            StateHasChanged();
        }
    }

    private ulong GetClosestTime(ulong time)
    {
        //Try find ex
        int matchIndex = Array.BinarySearch(AllTimes, time);

        //If no exact match then find closest match
        if (matchIndex < 0)
        {
            for (int i = 0; i < AllTimes.Length - 1; i++)
            {
                if (AllTimes[i] < time && time < AllTimes[i + 1])
                {
                    if (time - AllTimes[i] < AllTimes[i + 1] - time)
                    {
                        matchIndex = i;
                    }
                    else
                    {
                        matchIndex = i + 1;
                    }

                    break;
                }
            }
        }

        if (matchIndex < 0)
        {
            matchIndex = AllTimes.Length - 1;
        }

        return AllTimes[matchIndex];
    }

    private void RangeSelectStarted(MouseEventArgs args)
    {
        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = TimePos.GetTimeFromPos(relXPos, RangeParentWidth, StartTime, EndTime);
        ulong timeInTimeline = GetClosestTime(timeFromPos);
        StartRangeSelect = new TimePos(timeInTimeline);
        EndRangeSelect = StartRangeSelect;

        DocEvents.OnMouseUp += RangeSelectEnded;
        DocEvents.OnMouseMove += RangeSelectMove;

        StateHasChanged();
    }
    private void RangeSelectEnded(MouseEventArgs args)
    {
        DocEvents.OnMouseUp -= RangeSelectEnded;
        DocEvents.OnMouseMove -= RangeSelectMove;

        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = TimePos.GetTimeFromPos(relXPos, RangeParentWidth, StartTime, EndTime);
        ulong timeInTimeline = GetClosestTime(timeFromPos);
        EndRangeSelect = new TimePos(timeInTimeline);

        if (EndRangeSelect.Time < StartRangeSelect.Time)
        {
            var temp = StartRangeSelect;
            StartRangeSelect = EndRangeSelect;
            EndRangeSelect = temp;
        }

        ulong minTime = AllTimes.First();
        ulong maxTime = AllTimes.Last();

        StartTime = Math.Clamp(StartRangeSelect.Time, minTime, maxTime);
        EndTime = Math.Clamp(EndRangeSelect.Time, minTime, maxTime);

        CurrTime = Math.Clamp(CurrTime, StartTime, EndTime);

        MakeTimeTicks();
        StateHasChanged();
    }
    private void RangeSelectMove(MouseEventArgs args)
    {
        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = TimePos.GetTimeFromPos(relXPos, RangeParentWidth, StartTime, EndTime);
        ulong timeInTimeline = GetClosestTime(timeFromPos);
        EndRangeSelect = new TimePos(timeInTimeline);

        StateHasChanged();
    }
    private void ResetRange(MouseEventArgs args)
    {
        StartTime = AllTimes.First();
        EndTime = AllTimes.Last();

        MakeTimeTicks();
        StateHasChanged();
    }
}