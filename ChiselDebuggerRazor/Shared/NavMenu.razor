@using System.IO;

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">ChiselDebuggerWebUI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <InputFile id="fileInput" accept=".fir,.vcd" style="visibility: hidden; display: none;" OnChange="@LoadFiles" multiple></InputFile>
            <label for="fileInput">
                <a class="nav-link">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Load circuit
                </a>
            </label>
        </li>
        <li class="nav-item px-3">
            @foreach (var firrtlFilename in Examples.GetExamples())
            {
                <a class="nav-link" @onclick="_ => ShowExampleCircuitAsync(firrtlFilename)">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> @firrtlFilename
                </a>
            }
        </li>
    </ul>
</div>

@code {
    [Parameter]
    public Action<CircuitFiles> OnNewCircuitFiles { get; set; } = null!;

    [Inject]
    public IExampleCircuits Examples { get; set; } = null!;

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    protected override bool ShouldRender()
    {
        return false;
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ShowExampleCircuitAsync(string firrtlFilename)
    {
        OnNewCircuitFiles.Invoke(await Examples.GetExampleAsync(firrtlFilename));
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        CircuitFiles? circuitFiles = await CircuitFiles.FromFilesAsync(e.GetMultipleFiles());
        if (circuitFiles != null)
        {
            OnNewCircuitFiles.Invoke(circuitFiles);
        }
    }
}
