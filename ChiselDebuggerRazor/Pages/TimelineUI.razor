@using System.Globalization
@using VCDReader
@using ChiselDebug.Timeline

@inject IJSRuntime JS
@inherits ManualRenderBase

<div class="sideBySide">
    <div class="timelineControlsContent">
        <input class="timelineTimeInput" type="number" min="@AllTimes.First()" max="@AllTimes.Last()" value="@CurrTime" pattern="\d+" title="Positive numbers only." @oninput="TimeChanged" />
        <div class="sideBySide">
            <div class="timelineButton" @onclick="PreviousTime">&lt;</div>
            <div class="timelineButton" @onclick="NextTime">&gt;</div>
        </div>
    </div>
    <div class="timelineRangeContent">
        <div class="ticksPadding">
            <div id="@RangeDivID" class="rangeSelect" @ref="RangeDiv" @onmousedown="RangeSelectStarted" @ondblclick="ResetRange">
                <div class="rangeStart" style="width: @GetPixels(Math.Min(StartRangeSelect, EndRangeSelect)).ToPixels();"></div>
                <div class="rangeStop" style="left: @GetPixels(Math.Max(StartRangeSelect, EndRangeSelect)).ToPixels();"></div>
            </div>
        </div>
        <input class="timeline" type="range" min="@StartTime" max="@EndTime" value="@CurrTime" list="steplist" @oninput="TimeChanged" />
        <div class="ticksPadding">
            <div class="ticksList">
                @foreach (var time in TimeSteps)
                {
                    <tick style="left: @($"{GetXPercent(time).ToPercent()}"); top: 0px;">@time.ToStringWithDots()</tick>
                }
            </div>
        </div>
    </div>

    <datalist id="steplist">
        @foreach (var time in TimeSteps)
        {
            <option value="@time"></option>
        }
    </datalist>
</div>

@code {
    [CascadingParameter(Name = "DebugCtrl")]
    protected DebugController DebugCtrl { get; set; }

    [CascadingParameter(Name = "DocEvents")]
    protected MainLayout DocEvents { get; set; }


    private double RangeParentStartX;
    private double RangeParentWidth;
    private ulong StartRangeSelect;
    private ulong EndRangeSelect;
    private ElementReference RangeDiv;
    private readonly string RangeDivID = UniqueID.UniqueHTMLID();

    private ulong CurrTime;
    private ulong StartTime;
    private ulong EndTime;
    private ulong[] AllTimes;
    private List<ulong> TimeSteps = new List<ulong>();

    public float GetXPercent(ulong time)
    {
        return (((float)time - StartTime) / (EndTime - StartTime)) * 100;
    }

    public float GetPixels(ulong time)
    {
        return (GetXPercent(time) / 100) * (float)RangeParentWidth;
    }

    public ulong GetTimeFromPos(double xToTime)
    {
        double xPercent = xToTime / RangeParentWidth;
        double time = StartTime + EndTime * xPercent - xPercent * StartTime;

        ulong utime = (ulong)Math.Round(time);
        return Math.Clamp(utime, StartTime, EndTime);
    }

    protected override void OnFirstParametersSetAsync()
    {
        VCDTimeline timeline = DebugCtrl.Timeline;
        StartTime = timeline.TimeInterval.StartInclusive;
        EndTime = timeline.TimeInterval.InclusiveEnd();
        CurrTime = StartTime;
        AllTimes = timeline.GetAllSimTimes().ToArray();

        MakeTimeTicks();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSEvents.AddResizeListener(JS, RangeDivID, RangeResized);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void RangeResized(ElemWH size)
    {
        try
        {
            RangeParentStartX = (await JS.InvokeAsync<ElemWH>("JSUtils.getElementPosition", RangeDiv)).Width;
            RangeParentWidth = size.Width;

            StateHasChanged();
        }
        catch(Exception) { }
    }

    private void MakeTimeTicks()
    {
        TimeSteps.Clear();

        int startIndex = Array.BinarySearch(AllTimes, StartTime);
        int endIndex = Array.BinarySearch(AllTimes, EndTime);
        Span<ulong> times = AllTimes.AsSpan(startIndex, endIndex - startIndex + 1);

        //If the range includes too few times then stretch the selected timline
        //so enough times are included
        const int maxTimesOnTimeline = 15;
        if (times.Length < maxTimesOnTimeline)
        {
            //Try and get half the missing times from before selected timeline
            int missing = maxTimesOnTimeline - times.Length;
            startIndex = Math.Max(0, startIndex - (missing / 2));
            times = AllTimes.AsSpan(startIndex, endIndex - startIndex + 1);

            //Try and get the remaining missing times from after the selected time
            missing = maxTimesOnTimeline - times.Length;
            endIndex = Math.Min(AllTimes.Length - 1, endIndex + missing);
            times = AllTimes.AsSpan(startIndex, endIndex - startIndex + 1);

            for (int i = 0; i < times.Length; i++)
            {
                TimeSteps.Add(times[i]);
            }
        }
        else
        {
            float distanceBetweenTimes = times.Length / (float)(maxTimesOnTimeline - 1);
            for (int i = 0; i < maxTimesOnTimeline - 1; i++)
            {
                TimeSteps.Add(times[(int)MathF.Round(distanceBetweenTimes * i)]);
            }
            TimeSteps.Add(times[^1]);
        }

        StartTime = AllTimes[startIndex];
        EndTime = AllTimes[endIndex];

        StartRangeSelect = StartTime;
        EndRangeSelect = EndTime;
    }

    private void TimeChanged(ChangeEventArgs args)
    {
        if (ulong.TryParse((string)args.Value, out ulong time) &&
            time != CurrTime)
        {
            //Limit to range of timeline
            time = Math.Clamp(time, AllTimes.First(), AllTimes.Last());

            MoveCurrTime(GetClosestTime(time));
        }
    }

    private void NextTime(MouseEventArgs args)
    {
        int index = Array.BinarySearch(AllTimes, CurrTime) + 1;
        index = Math.Clamp(index, 0, AllTimes.Length - 1);
        if (CurrTime != AllTimes[index])
        {
            MoveCurrTime(AllTimes[index]);
        }
    }

    private void PreviousTime(MouseEventArgs args)
    {
        int index = Array.BinarySearch(AllTimes, CurrTime) - 1;
        index = Math.Clamp(index, 0, AllTimes.Length - 1);
        if (CurrTime != AllTimes[index])
        {
            MoveCurrTime(AllTimes[index]);
        }
    }

    private void MoveCurrTime(ulong inTimeline)
    {
        //changed time may lie outside the timeline range.
        //in that case set resize the range to include the
        //time.
        if (inTimeline < StartTime || inTimeline > EndTime)
        {
            StartTime = Math.Min(StartTime, inTimeline);
            EndTime = Math.Max(EndTime, inTimeline);
            MakeTimeTicks();
        }

        if (CurrTime != inTimeline)
        {
            CurrTime = inTimeline;
            DebugCtrl.SetCircuitState(CurrTime);
        }

        StateHasChanged();
    }

    private ulong GetClosestTime(ulong time)
    {
        //Try find ex
        int matchIndex = Array.BinarySearch(AllTimes, time);

        //If no exact match then find closest match
        if (matchIndex < 0)
        {
            for (int i = 0; i < AllTimes.Length - 1; i++)
            {
                if (AllTimes[i] < time && time < AllTimes[i + 1])
                {
                    if (time - AllTimes[i] < AllTimes[i + 1] - time)
                    {
                        matchIndex = i;
                    }
                    else
                    {
                        matchIndex = i + 1;
                    }

                    break;
                }
            }
        }

        if (matchIndex < 0)
        {
            matchIndex = AllTimes.Length - 1;
        }

        return AllTimes[matchIndex];
    }

    private void RangeSelectStarted(MouseEventArgs args)
    {
        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = GetTimeFromPos(relXPos);
        StartRangeSelect = GetClosestTime(timeFromPos);
        EndRangeSelect = StartRangeSelect;

        DocEvents.OnMouseUp += RangeSelectEnded;
        DocEvents.OnMouseMove += RangeSelectMove;

        StateHasChanged();
    }
    private void RangeSelectEnded(MouseEventArgs args)
    {
        DocEvents.OnMouseUp -= RangeSelectEnded;
        DocEvents.OnMouseMove -= RangeSelectMove;

        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = GetTimeFromPos(relXPos);
        EndRangeSelect = GetClosestTime(timeFromPos);

        if (EndRangeSelect < StartRangeSelect)
        {
            var temp = StartRangeSelect;
            StartRangeSelect = EndRangeSelect;
            EndRangeSelect = temp;
        }

        ulong minTime = AllTimes.First();
        ulong maxTime = AllTimes.Last();

        StartTime = Math.Clamp(StartRangeSelect, minTime, maxTime);
        EndTime = Math.Clamp(EndRangeSelect, minTime, maxTime);

        ulong inTimeRange = Math.Clamp(CurrTime, StartTime, EndTime);
        if (CurrTime != inTimeRange)
        {
            CurrTime = inTimeRange;
            DebugCtrl.SetCircuitState(CurrTime);
        }

        MakeTimeTicks();
        StateHasChanged();
    }
    private void RangeSelectMove(MouseEventArgs args)
    {
        double relXPos = Math.Max(0.0, args.ClientX - RangeParentStartX);
        ulong timeFromPos = GetTimeFromPos(relXPos);
        EndRangeSelect = GetClosestTime(timeFromPos);

        StateHasChanged();
    }
    private void ResetRange(MouseEventArgs args)
    {
        StartTime = AllTimes.First();
        EndTime = AllTimes.Last();

        MakeTimeTicks();
        StateHasChanged();
    }
}