@inherits ManualRenderBase

<svg class="wiresContainer">
    @foreach (var wireGroup in WirePaths.GroupBy(x => x.GetStartIO()))
    {
        <g class="wireGroup"  @onmouseover="x => DebugCtrl.MouseEntersIO(wireGroup.Key, x)" @onmouseout="x => DebugCtrl.MouseExitIO(wireGroup.Key, x)">
            @foreach (var wire in wireGroup)
            {
                <path class="wireHoverArea" d="@wire.ToSVGPathString()" fill="none"/>

                @if (wire.IsEnabled())
                {
                    <path class="wireElement wire" d="@wire.ToSVGPathString()" fill="none" />
                }
                else
                {
                    <path class="wireElement wire" style="stroke: gray;" stroke-dasharray="10,2" d="@wire.ToSVGPathString()" fill="none" />
                }

                @if (wire.StartsFromWire)
                {
                    <line class="wireElement wireConnection" x1="@wire.GetEndPos().X" y1="@wire.GetEndPos().Y" x2="@wire.GetEndPos().X" y2="@wire.GetEndPos().Y"/>
                }
            }
        </g>
    }
</svg>

@code
{
    [Parameter]
    public ModuleLayout ModLayout { get; set; }

    [CascadingParameter(Name = "DebugCtrl")]
    protected DebugController DebugCtrl { get; set; }

    private List<WirePath> WirePaths = new List<WirePath>();

    protected override void OnFirstParametersSetAsync()
    {
        ModLayout.SetWireUI(this);
        ModLayout.SubscribeToRouteTemplate(x => InvokeAsync(() => UpdateWires(x)));
    }

    private void UpdateWires(List<WirePath> wirePaths)
    {
        WirePaths = wirePaths;

        StateHasChanged();
    }

    public void PrepareForRender()
    {
        HasToRender = true;
    }
}
