@inherits FIRBase<BiArgMonoResPrimOp>

<div id="@SizeWatcherID" class="primOp sequential" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();">
    <div class="content" style="padding:@ContentPadding.ToPixels();">
        <div class="operation">
            <span class="primOpSymbol">@Operation.OpName</span>
            <div class="inputs-result">
                <div>@Operation.A.UpdateValueFromSourceFast().BitsToString()</div>
                <div>@Operation.B.UpdateValueFromSourceFast().BitsToString()</div>
                <div class="result">@Operation.Result.Value.ToBinaryString()</div>
            </div>
        </div>
    </div>

    @foreach (var input in SinkOffsets)
    {
        <IOPortUI Position="@input.Position" IO="@input.IO"></IOPortUI>
    }

    @foreach (var output in SourceOffsets)
    {
        <IOPortUI Position="@output.Position" IO="@output.IO"></IOPortUI>
    }
</div>

@code
{
    private const int ContentPadding = 5;

    protected override DirectedIO[] OnMakeSinks(int width, int height)
    {
        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point aInputPos = new Point(0, ioYStart);
        Point bInputPos = new Point(0, ioYStart + ioYDistance);

        return new DirectedIO[]
        {
            new DirectedIO(Operation.A, aInputPos, MoveDirs.Right),
            new DirectedIO(Operation.B, bInputPos, MoveDirs.Right)
        };
    }

    protected override DirectedIO[] OnMakeSources(int width, int height)
    {
        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point outputPos = new Point(width, ioYStart + ioYDistance * 2);

        return new DirectedIO[]
        {
            new DirectedIO(Operation.Result, outputPos, MoveDirs.Right)
        };
    }

}
