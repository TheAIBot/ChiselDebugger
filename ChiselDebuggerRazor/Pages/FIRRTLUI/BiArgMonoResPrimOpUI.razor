@inherits FIRBase<BiArgMonoResPrimOp>

<div id="@SizeWatcherID" class="primOp" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();">
    <div style="padding:@ContentPadding.ToPixels();">
        <table>
            <tr>
                <td class="primOpSymbol" rowspan="2" colspan="2">@Operation.OpName</td>
                <td>@Operation.A.UpdateValueFromSourceFast().BitsToString()</td>
            </tr>
            <tr>
                <td>@Operation.B.UpdateValueFromSourceFast().BitsToString()</td>
            </tr>
            <tr>
                <td colspan="3">@Operation.Result.Value.ToBinaryString()</td>
            </tr>
        </table>
    </div>

    @foreach (var input in SinkOffsets)
    {
        <IOPortUI Position="@input.Position" IO="@input.IO"></IOPortUI>
    }

    @foreach (var output in SourceOffsets)
    {
        <IOPortUI Position="@output.Position" IO="@output.IO"></IOPortUI>
    }
</div>

@code
{
    private const int ContentPadding = 5;

    protected override DirectedIO[] OnMakeSinks(int width, int height)
    {
        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point aInputPos = new Point(0, ioYStart);
        Point bInputPos = new Point(0, ioYStart + ioYDistance);

        return new DirectedIO[]
        {
            new DirectedIO(Operation.A, aInputPos, MoveDirs.Right),
            new DirectedIO(Operation.B, bInputPos, MoveDirs.Right)
        };
    }

    protected override DirectedIO[] OnMakeSources(int width, int height)
    {
        int contentHeight = height - ContentPadding * 2;
        int ioYStart = (contentHeight / 6) + ContentPadding;
        int ioYDistance = contentHeight / 3;

        Point outputPos = new Point(width, ioYStart + ioYDistance * 2);

        return new DirectedIO[]
        {
            new DirectedIO(Operation.Result, outputPos, MoveDirs.Right)
        };
    }

}
