@inherits FIRBase<Mux>

<div id="@SizeWatcherID" class="muxContainer sequential" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();">
    <div class="muxShapeContainer" style="height:@GetCurrentSize().Y.ToPixels();">
        <svg class="muxShape" viewBox="0 0 @WIDTH @GetCurrentSize().Y" preserveAspectRatio="xMidYMid meet">
            <defs>
                <linearGradient id="muxGradient" x1="0" y1="0" x2="1" y2="0" gradientUnits="objectBoundingBox">
                    <stop offset="0%" style="stop-color:#4c4c4c; stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#8c8c8c; stop-opacity:1" />
                </linearGradient>
            </defs>
            <polygon points="0,0 @WIDTH,@INDENT @WIDTH,@(GetCurrentSize().Y - INDENT) 0,@GetCurrentSize().Y" fill="url(#muxGradient)" />
        </svg>
    </div>

    @if (DeciderIO != null)
    {
        <IOPortUI Position="@DeciderIO.Position" IO="@DeciderIO.IO"></IOPortUI>
    }
    <ScopedIOUI NodeIO="@ChoiseIO"></ScopedIOUI>
    <ScopedIOUI NodeIO="@ResultIO"></ScopedIOUI>
</div>

@code
{
    private const int HEIGHT = 50;
    private const int WIDTH = 25;
    private const int INDENT = 12;
    private const int USABLE_CHOISE_HEIGHT = 25;
    private DirectedIO DeciderIO = null;
    private ScopedNodeIO ChoiseIO = null;
    private ScopedNodeIO ResultIO = null;

    protected override Task OnFirstParametersSetAsync()
    {
        int heightForSlope = INDENT * 2;
        int heightForIO = Operation.Choises.Length * IOPositionCalc.MinSpaceBetweenIO;
        SetCurrentSize(new Point(WIDTH, heightForSlope + heightForIO));

        return base.OnFirstParametersSetAsync();
    }

    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        StateHasChanged();
    //        InvokestateHasChanged();
    //    }

    //    return base.OnAfterRenderAsync(firstRender);
    //}

    protected override DirectedIO[] OnMakeSinks(int width, int height)
    {
        //Add chose input
        Point deciderOffset = new Point(WIDTH / 2, INDENT / 2);
        DeciderIO = new DirectedIO(Operation.Decider, deciderOffset, MoveDirs.Down);

        ChoiseIO = IOPositionCalc.VerticalScopedIO(new FIRIO[] { Operation.ChoisesVec }, 0, INDENT, INDENT);
        ChoiseIO.VerticalRecenter(height);

        DirectedIO[] choiseDirIO = ChoiseIO.GetSinkDirIO();
        DirectedIO[] inputIO = new DirectedIO[choiseDirIO.Length + 1];
        inputIO[0] = DeciderIO;
        Array.Copy(choiseDirIO, 0, inputIO, 1, choiseDirIO.Length);
        return inputIO;
    }

    protected override DirectedIO[] OnMakeSources(int width, int height)
    {
        ResultIO = IOPositionCalc.VerticalScopedIO(new FIRIO[] { Operation.Result }, WIDTH, INDENT, INDENT);
        ResultIO.VerticalRecenter(GetCurrentSize().Y);

        return ResultIO.GetSourceDirIO();
    }

}
