<div class="ioDot" style="left:@DotPosition.X.ToPixels();top:@DotPosition.Y.ToPixels();" @onmouseover="x => WindowEvents.MouseEntersIO(ScopedIO.DirIO.IO, x)" @onmouseout="x => WindowEvents.MouseExitIO(ScopedIO.DirIO.IO, x)">
    @if (AlwaysShowName)
    {
        <div class="@IONameClass" style="left:@NamePosition.X.ToPixels();top:@NamePosition.Y.ToPixels();">@ScopedIO.DirIO.IO.Name</div>
    }
</div>



@code {
    [Parameter]
    public ScopedDirIO ScopedIO { get; set; }

    [Parameter]
    public bool AlwaysShowName { get; set; } = false;

    [Inject]
    public IOWindowEvents WindowEvents { get; set; }

    private Point DotPosition = Point.Zero;
    private Point NamePosition = Point.Zero;
    private bool RightToLeft = false;
    private string IONameClass
    {
        get
        {
            return RightToLeft ? " ioNameRev" : "ioName";
        }
    }

    private const int DOT_RADIUS = 3;

    protected override Task OnParametersSetAsync()
    {
        //When position is set first, it represents the position of
        //the upper left corner of the dot. In order to center it
        //the radius is subtracted from the position.
        DotPosition = ScopedIO.DirIO.Position - new Point(DOT_RADIUS, DOT_RADIUS);
        NamePosition = new Point(ScopedIO.ScopeXOffset, 0);

        RightToLeft = ScopedIO.DirIO.IO.IsPassiveOfType<Source>();

        return base.OnParametersSetAsync();
    }
}
