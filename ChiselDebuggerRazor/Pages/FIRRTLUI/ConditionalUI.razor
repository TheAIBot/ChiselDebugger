@inherits FIRBase<Conditional>

<div id="@SizeWatcherID" class="conditional" style="left:@Position.X.ToPixels();top:@Position.Y.ToPixels();width:@GetCurrentSize().X.ToPixels();height:@GetCurrentSize().Y.ToPixels();">
    @foreach (var modPos in CondModules)
    {
        <ModuleUI @key=modPos.Value PosOp="modPos" ParentLayoutCtrl="CurrLayout" DebugCtrl=DebugCtrl IgnoreUnusedIO="true"></ModuleUI>
    }
</div>

@code {
    [Parameter]
    public DebugController DebugCtrl { get; set; }

    private List<Positioned<Module>> CondModules = new List<Positioned<Module>>();
    private CondLayout CurrLayout;

    public new void StateHasChanged()
    {
        base.StateHasChanged();
        CurrLayout.StatehasChanged();
    }

    protected override Task OnFirstParametersSetAsync()
    {
        CondModules = Operation.CondMods.Select(x => new Positioned<Module>(Point.Zero, x)).ToList();

        CurrLayout = new CondLayout(Operation);
        CurrLayout.OnLayoutUpdate += (x, y) => InvokeAsync(() => UpdateLayout(x, y));
        ParentLayoutCtrl?.AddChildLayout(CurrLayout);

        return base.OnFirstParametersSetAsync();
    }

    private void UpdateLayout(List<Positioned<Module>> positions, FIRComponentUpdate componentInfo)
    {
        CondModules = positions;

        SetCurrentSize(componentInfo.Size);
        ParentLayoutCtrl?.UpdateComponentInfo(componentInfo);
        StateHasChanged();
    }

    protected override Task OnResize(int width, int height)
    {
        return Task.CompletedTask;
    }

    protected override DirectedIO[] OnMakeSinks(int width, int height)
    {
        throw new NotImplementedException();
    }

    protected override DirectedIO[] OnMakeSources(int width, int height)
    {
        throw new NotImplementedException();
    }
}